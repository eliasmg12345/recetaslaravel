Agregar Login y autentitacion

-para habilitar la autentitacion de login y luego crear
    composer require laravel/ui
    php artisan ui:auth
-esto crea vistas sin estilos pero te dejan a disposicion 
y database 
_____________________________________________________________________________

Que son las migraciones
-en laravel son control de las versiones para la base de datos
-te permite modificar y compartir el schema de bd
-se puede generar la migracion al crear el modelo
    php artisan make:model <Nombre> --m
-una vez creada la migracion podras ejecutarla con artisan
....................................
Tipos de columnas:
en tus migraciones

bigIncrements       ideal para PK.
char                tipo char
float               Numero con Decimales
integer             Numero enteros
string              tipo Varchar
text                tipo Text

-para migrar la base de datos  
    php artisan migrate
-para deshacer las migraciones
    php artisan migrate:rollback
_____________________________________________________________________________
Añadir Bootstrap y VueJS al proyecto

    php artisan ui Bootstrap
    php artisan ui vue
    npm install
-para correr pero antes actualizar con (npm update)
    npm run dev
-para que se mantenga compilando todo el tiempo
 el npm (solo ocurre en archivos de sass como los de JavaScript)
    npm run watch
_____________________________________________________________________________
Ajustes al diseño y fuentes de google

en la carpeta sass
-app.scss es quien controla todo sus estilos (_<nombre>.scss)...ahi se importa desde google font el @import
-_variables.scss se pueden crear variables de estilos

_____________________________________________________________________________
INSTALAR PAQUETE PARA IDIOMA ESPAÑOL
    composer require laraveles/spanish
-ahora una vez habilitado el laraveles lo instalamos con:
    php artisan laraveles:install-lang
-configurar en app-config-app el en por es
_____________________________________________________________________________
CREAR URLs PROTEGIDAS EN LARAVEL
 EN EL controller agregamos un constructor =>RecetaController.php A1
_____________________________________________________________________________
14. PASANDO LAS CATEGORIAS DE LA BD A LA VISTA
en el controlador =>RecetaController.php B1
_____________________________________________________________________________
16.AÑADIEDNO TRIX Editor
de la pagina cdn https://cdnjs.com/libraries/trix

como solo necesitaremos en create pues olo configuramos en layouts.blade.php => C1
tanto para stilos y scripts...
en el input que pertenezca debe ser de tipo hidden
la sintaxis para agregar el editor es trix-editor e indicarle que input se le va a agregar
_____________________________________________________________________________
19. Almacenando imagenes en la base de datos
en el controller =>D1
y agregandole en html el enctype="multipart/form-dada"
-para crear un enlace simbolico de la imagen:
    php artisan storage:link
-para su validacion en el controller obtenemos la ruta de la imagen =>D2
_____________________________________________________________________________
20. EFECTOS DE LA IMAGEN
para hacer ajustes de la imagen
en la pagina http://image.intervention.io
-como en  laravel no permite añadirle efectos 
-tenemos que instalar 
    composer require intervention/image
-en el controller =>E1

Intervention\Image\ImageServiceProvider::class
'Image' => Intervention\Image\Facades\Image::class

_____________________________________________________________________________

============ INTRODUCCIONES A LOS MODELOS Y ELOQUENT ===============

1. QUE ES ELOQUENT ORM

EL ORM que viene en laravel su nombre es ELOQUENT
-te va a permitir conectar los objetos de una aplicacion con las tablas en una base de datos
-gracias a un ORM es facil realizar las operaciones de una BD en lugar de cosigo SQL
-cada framework tiene su propio ORM
-el ORM funciona usualmente sobre la M del MVC 
-cada tabla debera tener un modelo asociado a ella para tener las diferentes relaciones
- para crear un modelo...como es una clase se usa mayuscula:
    php artisan make:model <Nombre>
-se secomienda que mantengas el nombre que laravel crea
- el ORM funciona sobre el Modelo, el Modelo siempre esta conectado en la base de datos y 
el ORM se encarga de la relacion entre diferentes modelos.
-Eloquent cuenta con una serie de funciones para definir las relaciones entre tablas
......................................
- son seis 6
- la 1ra --relacion uno a uno
    1:1 -> hasOne
- la 2da --relacion uno a muchos
    1:n -> hasMany
- la 3ra --relacion de muchos a muchos
    n:n -> belongsToMany
hay otras que van en el sentido inverso
- la 4ta --relacion uno a uno
    1:1 -> belongsTo
- la 5ta --relacion uno a muchos
    n:1 -> belongsTo
- la 6ta --relacion de muchos a muchos
    n:n -> belongsToMany
__________________________________________________________________________

2. Creando una relacion 1n entre Usuarios y Recetas

-en el modelo User.php => F1 crearemos una funcion con el nombre que queramos
-luego reejecutamos nuevamente el sevidor por los cambios

-probaremos con el tinker para hacer algunas interacciones
>>> $us=User::find(1);
>>> $us->recetas        //con esto vemos la forma en que se relaciona... son colecciones
                        //es un arreglo ....de esta manera tenemos una relacion de los usuarios hacia sus recetas
                        //de esta manera tenemos una instancia de usuario y vamos guardando toda la informacion
_____________________________________________________________________________
3. Obtener las recetas creadas por un usuario con Eloquent
en el index colocando Auth::user()->recetas   ... =>G1
_____________________________________________________________________________
4. 