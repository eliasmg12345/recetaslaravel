Agregar Login y autentitacion

-para habilitar la autentitacion de login y luego crear
    composer require laravel/ui
    php artisan ui:auth
-esto crea vistas sin estilos pero te dejan a disposicion 
y database 
_____________________________________________________________________________

Que son las migraciones
-en laravel son control de las versiones para la base de datos
-te permite modificar y compartir el schema de bd
-se puede generar la migracion al crear el modelo
    php artisan make:model <Nombre> --m
-una vez creada la migracion podras ejecutarla con artisan
....................................
Tipos de columnas:
en tus migraciones

bigIncrements       ideal para PK.
char                tipo char
float               Numero con Decimales
integer             Numero enteros
string              tipo Varchar
text                tipo Text

-para migrar la base de datos  
    php artisan migrate
-para deshacer las migraciones
    php artisan migrate:rollback
_____________________________________________________________________________
Añadir Bootstrap y VueJS al proyecto

    php artisan ui Bootstrap
    php artisan ui vue
    npm install
-para correr pero antes actualizar con (npm update)
    npm run dev
-para que se mantenga compilando todo el tiempo
 el npm (solo ocurre en archivos de sass como los de JavaScript)
    npm run watch
_____________________________________________________________________________
Ajustes al diseño y fuentes de google

en la carpeta sass
-app.scss es quien controla todo sus estilos (_<nombre>.scss)...ahi se importa desde google font el @import
-_variables.scss se pueden crear variables de estilos

_____________________________________________________________________________
INSTALAR PAQUETE PARA IDIOMA ESPAÑOL
    composer require laraveles/spanish
-ahora una vez habilitado el laraveles lo instalamos con:
    php artisan laraveles:install-lang
-configurar en app-config-app el en por es
_____________________________________________________________________________
CREAR URLs PROTEGIDAS EN LARAVEL
 EN EL controller agregamos un constructor =>RecetaController.php A1
_____________________________________________________________________________
14. PASANDO LAS CATEGORIAS DE LA BD A LA VISTA
en el controlador =>RecetaController.php B1
_____________________________________________________________________________
16.AÑADIEDNO TRIX Editor
de la pagina cdn https://cdnjs.com/libraries/trix

como solo necesitaremos en create pues olo configuramos en layouts.blade.php => C1
tanto para stilos y scripts...
en el input que pertenezca debe ser de tipo hidden
la sintaxis para agregar el editor es trix-editor e indicarle que input se le va a agregar
_____________________________________________________________________________
19. Almacenando imagenes en la base de datos
en el controller =>D1
y agregandole en html el enctype="multipart/form-dada"
-para crear un enlace simbolico de la imagen:
    php artisan storage:link
-para su validacion en el controller obtenemos la ruta de la imagen =>D2
_____________________________________________________________________________
20. EFECTOS DE LA IMAGEN
para hacer ajustes de la imagen
en la pagina http://image.intervention.io
-como en  laravel no permite añadirle efectos 
-tenemos que instalar 
    composer require intervention/image
-en el controller =>E1

Intervention\Image\ImageServiceProvider::class
'Image' => Intervention\Image\Facades\Image::class

_____________________________________________________________________________

============ INTRODUCCIONES A LOS MODELOS Y ELOQUENT ===============

1. QUE ES ELOQUENT ORM

EL ORM que viene en laravel su nombre es ELOQUENT
-te va a permitir conectar los objetos de una aplicacion con las tablas en una base de datos
-gracias a un ORM es facil realizar las operaciones de una BD en lugar de cosigo SQL
-cada framework tiene su propio ORM
-el ORM funciona usualmente sobre la M del MVC 
-cada tabla debera tener un modelo asociado a ella para tener las diferentes relaciones
- para crear un modelo...como es una clase se usa mayuscula:
    php artisan make:model <Nombre>
-se secomienda que mantengas el nombre que laravel crea
- el ORM funciona sobre el Modelo, el Modelo siempre esta conectado en la base de datos y 
el ORM se encarga de la relacion entre diferentes modelos.
-Eloquent cuenta con una serie de funciones para definir las relaciones entre tablas
......................................
- son seis 6
- la 1ra --relacion uno a uno
    1:1 -> hasOne
- la 2da --relacion uno a muchos
    1:n -> hasMany
- la 3ra --relacion de muchos a muchos
    n:n -> belongsToMany
hay otras que van en el sentido inverso
- la 4ta --relacion uno a uno
    1:1 -> belongsTo
- la 5ta --relacion uno a muchos
    n:1 -> belongsTo
- la 6ta --relacion de muchos a muchos
    n:n -> belongsToMany
__________________________________________________________________________

2. Creando una relacion 1n entre Usuarios y Recetas

-en el modelo User.php => F1 crearemos una funcion con el nombre que queramos
-luego reejecutamos nuevamente el sevidor por los cambios

-probaremos con el tinker para hacer algunas interacciones
>>> $us=User::find(1);
>>> $us->recetas        //con esto vemos la forma en que se relaciona... son colecciones
                        //es un arreglo ....de esta manera tenemos una relacion de los usuarios hacia sus recetas
                        //de esta manera tenemos una instancia de usuario y vamos guardando toda la informacion
_____________________________________________________________________________
3. Obtener las recetas creadas por un usuario con Eloquent
en el index colocando Auth::user()->recetas   ... =>G1
_____________________________________________________________________________
4. crearemos el modelo CategoriaRecetas
    php artisan make:model CategoriaRecetas
veremos como obtener las categorias con modelo ...en el controlador =>H1
con esto modificariamos en el blade el foreach como solo as $categorias------{{$cateogoria->id}} {{$cateogoria->nombre}}
_____________________________________________________________________________
5. Creando una relacion 1 1 entre receetas y categorias
-en la tabla recetas tenemos una llave foranea categoria_id...de donde encontraremos una informacion sobre el ?
obteniendo la categoria de la receta via llave foranea FK
en el modelo Receta.php =>I1
 .................
-en el tinker podemos probarlo
 >>> $receta=Receta::find(3);       //probaremos con el id 3 del modelo Receta
 >>> $receta->categoria             //me devuelve el modelo de la CategoriaReceta
-ahora mostraremos en el blade =>index.php (cambiando la $categoria_id por $categoria->nomnbre)
_____________________________________________________________________________
6. guardando Recetas con modelo
-ahora sin utilizar el DB::table.....
-con el modelo es similar pero mas corto...en el controller =>J1
-asi como en el modelo usuario tiene su $fillable=[ '' , '' ,''] tambien lo tiene que tener 
el modelo Receta
_____________________________________________________________________________
==========================MOSTRANDO LAS RECETAS========================

1. metodo show
_____________________________________________________________________________
3. INTEGRAR librerias externas
-para instalar en la consola nos ubicamos donde se encuentra el package.json
    npm i --save moment
-una vez instalado la forma de integrar a laravel es la siguiente
    (en resources->js->bootstrap.js) =>K1
-agregamos js en el proyecto colocando el codigo 
    (window.moment = require('moment'));
_____________________________________________________________________________
4. creando componente de Vue para la fecha con MomentJS

-vamos a comentar la linea del app.js (Vue.component('.....))
-esto se va a reflejar en el show.blade con la etiqueta <fecha-receta></fecha-receta>
-dentro del FechaReceta.vue en export default {} dentro vueJs viene una api...por ejemplo hay uno que se llama mounted
-SE CREA el codigo para cambiar el formato de fecha y colocando en el componente =>FechaReceta.vue
_____________________________________________________________________________

5. creando una relacion para mostrar el Autor

-En el modelo receta.php => L1  // similar a I1
-Aumentandole el , 'user_id'  //le ayudas a laravel a especificar en que campo se encuentra y se esta guardando esa relacion
-mostrando el autor en show.blade
_____________________________________________________________________________
6. Mostrar las recetas a usuarios no autenticados
-la idea es que el show de las recetas sea publico
-si quiero editar eliminar... debe de ser privado// laravel lo hace muy sencillo
-en el controller se encuentra autenticado pero queremos mantener abierto el show como publico 
para esto en el middleware('auth',['except'=>['show']]);  ///con esto el show no va a requerir autenticacion
_____________________________________________________________________________
7. para solucionar el ´problema de TRIX-Editor
-se puede ver que el archivo que compila en app.blade.php ---> js/app.js tiene el defer(lo que hace es esperar lo que todo el contenido
de la pagina este cargado html y despues carga ese archivo JS...) para esto agregamos el defer en el scrip de create.blade.php
-tambien vemos que en vue no sigue algunas normas...podemos ver la etiqueta trix-editor similar a la etiqueta fecha-receta
con esto vueJs piensa quie trix-editor es un componente al que no puede entrar para hacer esto es 1(UNO) crear un componente en el VueJs con ese trix editor
o 2(DOS) es abrir el app.js y colocar Vue.cofig.ignoreElements=['']   //podemos pasar etiquetas que pueden parecer componentes de VueJs pero no lo son...con esto 
le decimos trix.editor no es un componente entonces ignoralo
_____________________________________________________________________________

=========================EDICION DE RECETAS =====================================

1. El metodo Edit
-la estructura para edit tiene que ser de tipo GET asi que en web.php
-como las categorias no estan disponibles entonces en el controller similar al create colocamos el metodo all  =>M1
_____________________________________________________________________________
2. primeros pasos con el formulario 
-pasar pasar la informacion que vamos a editar y llenar los campos automaticamente
-en la funcion edit del controller se ve que tiene una instancia (Receta $receta) =>N1
_____________________________________________________________________________
3. registrando el metodo para editar y agregando seguridad
-usaremos el metodo update...asi que en web.php
-la diferencia de put es que patch es solamente una actualizacion parcial mienras que put es total...usualemte tiene mas poder el put ya que puede modificar todo o parcial gg 
-en el edit.blade.php cambiamos del action porque tenemols que pasarle recetas.update y tambien el id...tendria la sisntaxis muy similar al de index.blade en los a href
-sin embargo el PUT no es soportado por el html ...solo soporta get o post por lo tanto mantenemos como POST ...pero adicional agregamos la directiva que laravel nos da con @method('PUT' )
_____________________________________________________________________________
4. Guardadno la receta Editada en la BD
- primero validamos copiando similar al create
- la imagen no sera obligatorio validar
_____________________________________________________________________________
5. asegurarse que solo quien creoi esa receta puede editarla
- en laravel hay los policy -...son formas de autorizar a un usuario de relizar ciertaws acciones,,,eje de actualizar o eliminar registros
-para eso en l a consola ... le atas con el modelo (-m <nombreModelo>)
    php artisan make:policy RecetaPolicy -m Receta
-los policy se gusrdan en la app
-existen metodos creados ...el que nos interesa es el update... en el RecetaPolicy.php ==> N1
-luego en el controller revisamos el policy en RecetaController.php =>N2
_____________________________________________________________________________
========================ELIMINAR RECETAS===================================

1. Eliminando recetas  de la Base de datos
-en el route web.php tiene que ser delete
-como el balde de html no soporta el delete...tenemos que colocar un @method('DELETE)
-no olvidar que la pagina expira por lo tanto se pone el token @csrf 
-para eliminar tambien podemos usar el POLICY en cual podemos asegurar que el usuario que vba eliminar es quien lo creo
el codigo es el mismo  de N1

_____________________________________________________________________________
2. Creando un componente de Vue para eliminar una receta.
-eliminando una receta utilizando axios vueJs y tambien SweetAlert
-por lo tanto vamos a elim o comentar el form de delete en el index.blade.php para llevarnos al componente de Vue
-en ->  js->components->EliminarReceta.vue ....sin olvidar añadir en el app.js para registrar nuestro nuevo componente
-para pasarle su Id en EliminarReceta.vue en EliminarReceta.vue =>.... en el blade index de la etiqueta <eliminar-receta> podemos pasarle un props--- este prop va a tener receta-id y va a ser igual al valor de la $rec->id
_____________________________________________________________________________
3. Creando un metodo para eliminar una receta
-escuchando por un evento el eliminar recetas ...para eso en la etiqueta input del vue Eliminar colocamos v-on:click="  "
-es lo mismo poner el evento === v-on: === que === @ ===
_____________________________________________________________________________
4. Agregano SweetAlert
-vamos a instalar de la pagina https://www.npmjs.com/package/vue-sweetalert2
-pero ya integrada con vueJs ejecutando en la consola para instalar la dependencia
    npm install -S vue-sweetalert2
-luego importamos en la app.js ---luego usamos con Vue.use()........//importante (si no funciona el impor comprobar con otro segun la pagina )
-ahora en el motodo de eliminarReceta en el .vue pegamos el contenido de sweetalert2  
_____________________________________________________________________________
5. ElimiNAR Receta con Vue y SweetAlert
-eliminar una peticion con axios //para esos e podria poner axios.delete pero laravel y vue no lo soporta //por lo tanto ponemos post hacia esa ruta ` /`
-importante un delete con axios tienes que pasarle un parametro 
-axios funcoina con promes asi que ponemos el then catch
-PARA QUE confirme la eliminacion el mensaje lo ponemos en el .then
-para que elimine la receta del dom. viendo el $el tenemos que eliminar el bloque input ..para eso vamos al padre al padre al padre luego eliminamos el tr que es su hijo
_____________________________________________________________________________
===============================CREANDO PERFILES PARA LOS USUARIOS=======================================

1. creando Modelo, Migracion y Controlador para Perfiles
    php artisan make:model Perfil -mcs
-asignando campos a la tabla perfils 
_____________________________________________________________________________
2. Creando una relacion entre USUARIOS y Perfiles
-en este caso va a ser una relacion de uno a uno//Un usuario va a tener un perfil por lo tanto hasOne en el modelo User.php =>O1
-y viceversa para el moldeo Pefil =>O2...y como es una relacion unversa se usa belongsTo()
-nos interesa crear el perfil una vez que haya sido creado ..para eso lo aremos con los eventos de eloquent en el sigte.
_____________________________________________________________________________
3. Creando un Perfil en cuanto un usuario se registra con Events
-estos erventos se agregan en lo que vienen siendo el modelo de Usuario  
- evento que se ejecuta cuando un usuario es creado 
-la sintaxis es de parent en el Modelo User.php => P1 //como muestra en la documentacion de laravel  ( https://laravel.com/docs/8.x/eloquent#events-using-closures )
-ahora para probar crearemos un uevo registro no olvidar primero hacer un roollback si se quiere
_____________________________________________________________________________
4. Crear Perfiles desde el Seeder
- primero haremos un migrate:fresh
-en el seeder de User crearemos una nuevas variables ..ya que contamos con modelos sera pocas lineas de codigo =>Q1
_____________________________________________________________________________
=============================== FUNCIONALIDAD DE PERFILES ===============================

1. Mostrando Perfiles
-comenzamos con el route web.php
-en el controller no utilizaremos el index,crate y store...
-en el modelo de Perfil tenemos que indicar el user_id a la relacion belongsTo...con eso se lo trae el registro a perfil
_____________________________________________________________________________
2. Creando el Formulario para editar un perfil
-similar al edit de recetas
_____________________________________________________________________________
3. Validación del Perfil y otros ajustes
-la peticion se va a mandar hacia update ...en web.php se usa el PUT
-no olvidar eu en el form para que soporte imagenes se incluye el enctype
-ademas el @method('put') y para el token el @csrf
-validar, si sube imagen  y guardar esa informacion , luego redireccionar en el controller =>R1
_____________________________________________________________________________
4. Guardando la información del Formulario en el Perfi
-practicamente tenemos que actualizar en dos lugares ...ususarios y Perfiles
-primero tendriamos que asignar nombre y URL luego asignar  biografia e imagen porque estan en tablas diferenetes..en el controlelr =>S1
_____________________________________________________________________________
5. Guardar la imagen del Perfil
-vamos a poner un if con el request en el campo imagen en el controller =>T1
-el codigo es el mismo que se encuentra en receta controller ...no olvidar importar el facade de imagen
_____________________________________________________________________________}
========================ULTIMOS AJUSTES PARA EL PANEL DE ADMINISTRACION ===================

1. Enlazando el Panel de Administración con Ver Perfil

-como usuarios es una vista que existe ya en tu template de Blade ...una forma mas rapida de  ver a los usuarios en el blade es {{Auth::user() }}
-para agregar una nueva parte en la parte superior bajjo del Login ...en app.blade.php hacemos algunas inclusiones 
_____________________________________________________________________________
2. Añadiendo Iconos a nuestro panel
-de la pagina https://heroicons.dev/?query=user copiaremos los codigos de las figuras al nuevo archivo creado ...ahi llevaremos todos los a href para que no se vea mucho codigo
-para eso creamos un nuevo archivo blade ui.navegacion.php y luego hacemos el include en el index.blade.php tambien en los edits.blade
_____________________________________________________________________________
3. Creando Policy para edición de Perfiles
-en la consola...para que verifique que modelo va a ser el policy sera el perfil
    php artisan make:policy PerfilPolicy -m Perfil
-ahora lo unico que nos interesa proteger es el Update en el PerfilPolicy.php =>U1
-ahora lo ejecutamos en el controlador de perfil en la parte de update =>U2
-PROTEGIENDO EL EDIT ...en el controlador de perfil para crear el constructor => U3
-Ahora si alguien esta entrando a un perfil que no es de El entonces hay que revisar en el policy de Perfil...usando la misma validacion ... en la parte de view ya que solo bloquea ciertas partes =>U4
la diferencia con update se ejecuta hasta que alguien este actualizando algo---pero nosotros queremos bloquear que vean algo
-en el controlador del perfil en el metodo de edit (que es el que queremos bloquear) ponemos el autorize bloqueando el view  => U5
_____________________________________________________________________________
4. Evitar que otra persona vea el formulario de edición
- trabajando en el policy de recetas pero en la parte de view =>V1 Y luego posterior añadir el autorize en su controller en la parte del edit=>V2
_____________________________________________________________________________
5. Paginación de las Recetas
-utilizando los modelos vamos a modificar el index de receta.controller.php =>W1
-luego en el index.blade.php al final agregamos links()=>W2
_____________________________________________________________________________
6. Mostrando las recetas en Perfil
-importando el modelo receta en el controlador de perfil y usando eloquent => X1 en el
_____________________________________________________________________________
=====================Almacenando Me Gusta a las Recetas=============================

1. Utilizando una Animación para los Me Gusta
-se creara un componente de vueJs en el show.blade.php de recetas luego en los diferentes ficheros => Y[i]
_____________________________________________________________________________
2. Creando una tabla Pivote para almacenar los Likes
-crearemos otra migracion y que tambien nos cree la tabla likes_receta
    php artisan make:migration create_likes_receta_pivot_table --create likes_receta
-luego añadiremos campos extra //laravel usa otra funcion mas compacta en cuanto a llaves foraneas --- ->constrainded ();
-la forma de hacer una migracion si borrar lo que ya tienes es ....
    php artisan migrate --path=/database/migrations
_____________________________________________________________________________
3. Creando una relación para los Likes
-cada usuario puede guardar muchas recetas como megusta , tambien cada publicacion puede tener muchos likes //ambas utilizan el belongsToMany
-primero en el modelo de recetas =>Z1 //añadiendo cierta informacion ..diciendo que nuestra tabla  pivote es likes_receta
-segundo en el modelo de usuario =>Z2 //añadiendo cierta informacion ..diciendo que nuestra tabla  pivote es likes_receta
-haciendo pruebas con el tinker
_____________________________________________________________________________
4. Almacenar o Quitar los Likes con un Toggle
-creando un controlador que se va a encargar de almacenar de los meGusta y noMeGusta //muy importante como va almacenar los likes de una receta le vamos a agregar un modelo con  -Receta
    php artisan make:controller LikesController -m Receta
-solo vamos a requerir update  porque almacena los nuevos registros //el update  usualemte esta asociado con el metodo POST 
-asi que en el web.php =>AA1 ....esta va a ser la url a la cual le enviaremos la peticion del axios 
-en laravel tenermos que tomar el usuario que esta autenticado y despues acceder a la parte de meGusta para ir guardando los megusta. en el store de Likescontroller =>AA2
_____________________________________________________________________________
5. Almacenar o Quitar los Likes de la BD
-en el LikeButton.vue =>BA1
-el el show.blade de recetas en la etiqueta del like-button le pasaremos el id  de la receta=>BA2...y esta receta-id le tenemos que pasar via props al BA1
_____________________________________________________________________________
6. Mostrando el Estado del Like al cargar la receta
-vamos a crear una variable en el show de RecetaControler =>CA1
-esta variable $like le pasaremos al vue dentro del componente like-button
-para que la animacion se mantenga usamos la directiva de vue en la etiqueta <span>  el :class="{}" con el scss que activa el color
_____________________________________________________________________________
7. Mostrando la Cantidad de Likes de una receta
-en la receta controller despues de CA1 =>DA1
-esa variable le pasamos al componente de vuejs
-esa nueva variable en el vue va a estar asociado con una nueva propiedad llamada computed -....vamos acrear una funcion llamada cantidadLikes: function(){}
-como los computes son un poco mas estaticos ...para se recomienda hacer mas con un data:
_____________________________________________________________________________
8. Prevenir que las personas no puedan darle Like sino han iniciado sesión
-en el LikesController =>EA1 ...Utiizar el mismo codigo para proteger un componente ...(--- usando constuctor y el middleware---)
-para que no muestre un error 401 en el vuejs crearemos una vista para que invite a crear una nueva cuenta...en el .catch =>
-para que el iconito no se marque hacemos alguns ajustes en codigo ..dentro del return del data: usamos la propiedad isActive: ...eso se cambia tambien en el class de span 
_____________________________________________________________________________
9. Mostrar las Recetas que el usuario le ha dado Like en el Panel
- en la RecetaController en el metodo index =>FA1..luego en el index de recetas =>FA2
_____________________________________________________________________________
======================16. Red Social Recetas - Mostrando las Recetas en la página Principal ===============================

1. Creando el Controlador para la Vista de Inicio 
    php artisan make:controller InicioController
-y creando el blade index y cambiando el home de web.php
-agregar el scss en _recetas.scss de la pagina https://gist.github.com/juanpablogdl/a53dadc2040ad6d35b2d09aa0b8d4758
_____________________________________________________________________________
2. Obteniendo las últimas recetas
-consultando las recetas mas nuevas y mostrar en la pagina principal
-en laravel existe un Query Builder //utilzia consultas de sql mas comun 
-en nuestro caso en el controller de inicio vamos a hacer una consulta =>GA1
_____________________________________________________________________________
3. Mostrando la información de las Recetas
-para eliminar el codigo html usamos el {{strip_taps ($n)}}
-para qeu no se vea mucha letra vamos a utilizar unos helpers de LARAVEL...usaremos uno para strings  Str::words ( , 50 )   //existen varios helpers de Laravel
_____________________________________________________________________________
4. Añadiendo OWL Carousel
-instalando Carousel
    npm i owl.carousel
-la hoja de estilos la buscaremos por cdnjs   https://cdnjs.com/libraries/OwlCarousel2
-pegarlo en el index.blade de inicio
-para agregar el carrusel al proyecto se hace en dos lugares 
- en el archivo webpack.mix.js //este lo que hjace es tomar el archivo de entrada de app.js como JS   //mix convierte en assests con webpack para jquery  para vueJs para Bootsatrap etc
en el archivo es que le agregas como configuracion y le dices que el app.js  quieres precargarle  con .autoload y va a ser un objeto y  vamos a cargar Jquery porque carrusel lo requiere =>HA1
no requieres instalarlo porque laravel ya lo tiene 
-luego haciendo algunas configuraciones en el app.js //importando
-con esto se ve que funciona en el frontend de nuestro sitio web
-ahora en el blade de inicio integramos en la clase del div el owl-carousel y owl-theme
-luego en el app.js integramos el jQuery('.owl-carousel').owlCarousel({});  ...y dentro de este podemos poner los estilos como; margin:10 y los items deacuerdo al tamaño
_____________________________________________________________________________
5. Obtener Las Recetas por su categoría
-en el controller de inicio => IA1
-para que los espacios no causen problemas utilizaremos un helper de laravel,,donde te crea un slug 
_____________________________________________________________________________
6. Mostrando las Categorías de las Recetas
-ahora para quitar ese guion usaremos la sintaxis de php  str_replace que lo que hace es buscar y reemplazar
-luego poniendo dos foreach ya que es de 3 dimensiones
_____________________________________________________________________________
7. Mostrando cada Receta
-
_____________________________________________________________________________
8. Obtener y Mostrar las Recetas más votadas
- EN EL CONTROLADOR ed inicio =>JA1
- en el index.blade vamos a cortar lo que es dentro del foreach ..creando un archivo nuevo en el ui con el nombre de receta.blade.php...luego ponemos el include en el index
_____________________________________________________________________________
========================17.  Últimos Ajustes, Mostrar Receta por Categoría y Buscador ===================

1. Creando un Menú de Recetas
-los services providers de laravel ...tenemos  que tener en cuenta que todo lo que hicimo con laravel desde autenticacion conexion base de datos hasta traducciones se realizo desde algo llamado providers 
si abrimos config->app.php se puede ver la lista de providers.... todas esas funcionalidades llega por un providers 
-asi que vamos a crear un providers para consultar las categorias  y pasarlas a todas las vistas 
    php artisan make:provider CategoriasProvider
-estos providers se encuentran en app->providers //vemos que tiene dos metodos 
-en register vas a colocar las dependencias que va a ejecutar al configurar tu proyecto...es algo que no depende de nada de laravel ....entonces register registra todo antes que laravel comience 
-en boot se va a ejecutar todo cuando la aplicacion esta lista ...es lo que vamos a utilizar para ejecutar la base de datos y pasar a la lista ...necestias hacer uso de algo de laravel
- en CategoriasProvider.php =>KA1
- para importar el view solo se pone use View
-el codigo por si solo no va a funcionar ..tenemos que registrar nuestro propio provider ..parea eso incluimos en el config->app.php 
_____________________________________________________________________________
2. Mostrando las Recetas por categoría.
-creando el controlador
    php artisan make:controller CategoriasController
-configurando en el web.php
-en el controller =>LA1
_____________________________________________________________________________
3. Creando un Buscador
-por ejemplo en el app.blade.php en script el js/app.js utiliza el asset de la misma forma utiliza para imprimir la hoja de estilos
ese asset hace referencia hacia la carpeta public ...si quieres añadir imagenes a tu proyexto tienes que crear una carpeta llamada images 
-como abrir una imagen estatica ?...en el index de inicio ...hay dos formas muy comun de hacerlo //una es usando el url =>MA1//otra forma ers usando el asset ..es otro helper que apunta hacia la carpeta donde se estan almacenando  las imagenes los js y css 
-nuestro buscador va a tener una imaden de fondo ...ahora vamos a crear una seccion yield en el app.blade.php llamada hero
-y en el index.blade.php usamos esa seccion hero
-luego en el web.php agregamos buscardor de receta ... en el controladorReceta ...
-luego en el controlador de receta =>MA2 ...no olvidar poner en el form de hero el action={}
_____________________________________________________________________________
4. Buscando Recetas por lo que el usuario coloque en el Input
-podemos utilizar el like de la base de datos ---laravel lo funciona bien ...en RecetaController.php en el metodo search =>NA1...
-para mejorar la busqueda usaremos el metodo appends 
_____________________________________________________________________________
5. Últimos Ajustes
-colocando enlaces en el show.blade de recetas